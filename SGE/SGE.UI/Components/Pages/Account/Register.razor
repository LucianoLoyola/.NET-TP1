@page "/register"
@using SGE.Aplicacion
@using SGE.Aplicacion.Entidades
@using SGE.Repositorios
@using SGE.Aplicacion.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@inject SGEContext DbContext
@inject NavigationManager navigationManager
@inject IServicioHash servicioHash

@using System.Security.Cryptography;
@using System.Text;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="HandleRegistration" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/panel1.png" style="max-height:5rem;" />
                <h3>REGISTRO</h3>
            </div>
            <div class="mb-3">
                <label>Usuario</label>
                <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.UserName" />
            </div>
            <div class="mb-3">
                <label>Nombre</label>
                <InputText @bind-Value="Model.Name" class="form-control" placeholder="Name" />
                <ValidationMessage For="() => Model.Name" />
            </div>
            <div class="mb-3">
                <label>Apellido</label>
                <InputText @bind-Value="Model.Surname" class="form-control" placeholder="Surname" />
                <ValidationMessage For="() => Model.Surname" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>Contrase침a</label>
                <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3">
                <label>Confirme su Contrase침a</label>
                <InputText @bind-Value="Model.ConfirmPassword" placeholder="Confirm Password" type="password" class="form-control" />
                <ValidationMessage For="() => Model.ConfirmPassword" />
            </div>

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Registrar</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        Console.WriteLine("HandleRegistration called");

        if (string.IsNullOrEmpty(Model.UserName) ||
            string.IsNullOrEmpty(Model.Password) ||
            string.IsNullOrEmpty(Model.Name) ||
            string.IsNullOrEmpty(Model.Surname) ||
            string.IsNullOrEmpty(Model.Email))
        {
            errorMessage = "Todos los campos son obligatorios";
            Console.WriteLine(errorMessage);
            return;
        }

        Console.WriteLine("Passed validation checks");

        // Verificar si el usuario ya existe
        var existingUser = DbContext.Usuarios.FirstOrDefault(x => x.UserName == Model.UserName);
        if (existingUser != null)
        {
            errorMessage = "El usuario ya existe";
            Console.WriteLine(errorMessage);
            return;
        }
        Console.WriteLine("User does not exist");

        var hayUsuarios = DbContext.Usuarios.Any();

        // Crear una nueva cuenta de usuario
        var userAccount = new UserAccount
        {
            UserName = Model.UserName,
            Password = servicioHash.GetHashSha256(Model.Password),
            Role = hayUsuarios ? "Usuario" : "Administrador",
            Name = Model.Name,
            Surname = Model.Surname,
            Email = Model.Email,
            Permisos = hayUsuarios
                ? new List<Permiso>
                {
                    new Permiso { tipoPermiso = TipoPermiso.Lectura } // Asignar permiso de lectura
                }
                : new List<Permiso>
                {
                    new Permiso { tipoPermiso = TipoPermiso.Lectura }, // Asignar permiso de lectura
                    new Permiso { tipoPermiso = TipoPermiso.ExpedienteAlta },
                    new Permiso { tipoPermiso = TipoPermiso.ExpedienteModificacion },
                    new Permiso { tipoPermiso = TipoPermiso.ExpedienteBaja },
                    new Permiso { tipoPermiso = TipoPermiso.TramiteAlta },
                    new Permiso { tipoPermiso = TipoPermiso.TramiteModificacion },
                    new Permiso { tipoPermiso = TipoPermiso.TramiteBaja }
                }
        };

        DbContext.Usuarios.Add(userAccount);
        await DbContext.SaveChangesAsync();
        Console.WriteLine("Saved changes to database");

        // Redirigir al usuario a la p치gina de inicio de sesi칩n
        navigationManager.NavigateTo("/login");
        Console.WriteLine("Navigated to /login");
    }
}
