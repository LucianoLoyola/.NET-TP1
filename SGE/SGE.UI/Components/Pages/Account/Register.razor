@page "/register"
@inject AgregarUsuarioUseCase agregarUsuario
@inject ListarUserAccountUseCase listarUsuarios
@inject ObtenerUserAccountUseCase getUsuario
@inject LoginUseCase login
@inject NavigationManager navigationManager
@inject IServicioHash servicioHash
@using System.Security.Cryptography;
@using System.Text;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Registrar" OnInvalidSubmit="Registrar" FormName="RegisterForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/panel1.png" style="max-height:5rem;" />
                <h3>REGISTRO</h3>
            </div>
            @if (mostrarForm){
                <div class="mb-3">
                    <label>Usuario</label>
                    <InputText @bind-Value="Model.UserName" class="form-control" placeholder="Username" />
                    <ValidationMessage For="() => Model.UserName" />
                </div>
                <div class="mb-3">
                    <label>Nombre</label>
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="Name" />
                    <ValidationMessage For="() => Model.Name" />
                </div>
                <div class="mb-3">
                    <label>Apellido</label>
                    <InputText @bind-Value="Model.Surname" class="form-control" placeholder="Surname" />
                    <ValidationMessage For="() => Model.Surname" />
                </div>
                <div class="mb-3">
                    <label>Email</label>
                    <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                    <ValidationMessage For="() => Model.Email" />
                </div>
                <div class="mb-3">
                    <label>Contraseña</label>
                    <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
                    <ValidationMessage For="() => Model.Password" />
                </div>
                <div class="mb-3">
                    <label>Confirme su Contraseña</label>
                    <InputText @bind-Value="Model.ConfirmPassword" placeholder="Confirm Password" type="password" class="form-control" />
                    <ValidationMessage For="() => Model.ConfirmPassword" />
                </div>
            }
            @if(!mostrarForm){
                <div class="mb-3 d-grid gap-2">
                    <a href="/login" class="btn btn-primary">Iniciar sesión</a>
                </div>
            }

            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
                <span class="text-success">@successMessage</span>
            </div>

            @if(mostrarForm){
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Registrar</button>
            </div>
            }

        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();
    private bool mostrarForm = true;
    private string? errorMessage,successMessage;

    void Registrar(){

        var existingUser = getUsuario.Ejecutar(Model.UserName);
        var hayUsuarios = listarUsuarios.Ejecutar().Any();
        
        if (existingUser != null)
        {
            errorMessage = "El usuario ya existe";
            return;
        }

        // Crear una nueva cuenta de usuario
        var userAccount = new UserAccount
        {
            UserName = Model.UserName,
            Password = servicioHash.GetHashSha256(Model.Password),
            Role = hayUsuarios ? "Usuario" : "Administrador",
            Name = Model.Name,
            Surname = Model.Surname,
            Email = Model.Email,
            Permisos = hayUsuarios
                ? new List<Permiso>
                {
                    new Permiso { tipoPermiso = TipoPermiso.Lectura } // Asignar permiso de lectura
                }
                : new List<Permiso>
                {
                    new Permiso { tipoPermiso = TipoPermiso.Lectura }, // Asignar permiso de lectura
                    new Permiso { tipoPermiso = TipoPermiso.ExpedienteAlta },
                    new Permiso { tipoPermiso = TipoPermiso.ExpedienteModificacion },
                    new Permiso { tipoPermiso = TipoPermiso.ExpedienteBaja },
                    new Permiso { tipoPermiso = TipoPermiso.TramiteAlta },
                    new Permiso { tipoPermiso = TipoPermiso.TramiteModificacion },
                    new Permiso { tipoPermiso = TipoPermiso.TramiteBaja }
                }
        };

        agregarUsuario.Ejecutar(userAccount);
        mostrarForm = false;
        successMessage = "Se ha registrado con exito!";

        @* navigationManager.NavigateTo("/login"); *@

    }
}
