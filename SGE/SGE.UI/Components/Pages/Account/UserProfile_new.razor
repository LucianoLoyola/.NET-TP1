@page "/userprofile_new"
@attribute [Authorize(Roles="Administrador")]
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject AgregarUsuarioUseCase agregarUsuario
@inject IServicioSesion sesion
@inject SGEContext DbContext
@inject NavigationManager Navigation
@inject IServicioHash servicioHash

<h3>Nuevo Usuario</h3>
<form method="post" @onsubmit="AgregarUsuario">
    <div class="mb-3">
        <label for="UserName">Nombre de Usuario:</label>
        <input type="text" id="UserName" class="form-control" @bind="user.UserName" required />
    </div>
        <div class="mb-3">
        <label for="Email">Contraseña:</label>
        <input type="password" id="Contraseña" class="form-control" @bind="user.Password" required />
    </div>
    <div class="mb-3">
        <label for="Name">Nombre:</label>
        <input type="text" id="Name" class="form-control" @bind="user.Name" required />
    </div>
    <div class="mb-3">
        <label for="Surname">Apellido:</label>
        <input type="text" id="Surname" class="form-control" @bind="user.Surname" required />
    </div>
    <div class="mb-3">
        <label for="Email">Email:</label>
        <input type="email" id="Email" class="form-control" @bind="user.Email" required />
    </div>
    <div class="mb-3">
        <label for="Role">Rol:</label>
        <select id="Role" class="form-control" @bind="user.Role" required>
            <option value="Usuario">Usuario</option>
            <option value="Administrador">Administrador</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="Permisos">Permisos:</label>
        @foreach (TipoPermiso permiso in Enum.GetValues(typeof(TipoPermiso)))
        {
            <div>
                <input type="checkbox" id="permiso-@permiso" @onchange="e => TogglePermiso(permiso, e)" />
                <label for="permiso-@(permiso)">@(permiso)</label>
            </div>
        }
    </div>
    
        <button class="btn btn-primary" @onclick="AgregarUsuario">Agregar</button>
</form>


@code {
    [Parameter]
    public int UserId { get; set; }
    private List<TipoPermiso> permisosSeleccionados = new List<TipoPermiso>(); // Crear lista de permisos seleccionados
    private UserAccount user { get; set; } = new UserAccount();
    private void TogglePermiso(TipoPermiso permiso, ChangeEventArgs e)
    {
        if ((bool)e.Value) permisosSeleccionados.Add(permiso); // Agregar el permiso a la lista de permisos seleccionados
        else permisosSeleccionados.Remove(permiso); // Quitar el permiso de la lista de permisos seleccionados
    }
    void AgregarUsuario()
    {
        try{
            if(user.Role is null){
                user.Role="Usuario";
            }
            user.Password=servicioHash.GetHashSha256(user.Password);

            // Mapear los permisos seleccionados a objetos Permiso
            var permisosActualizados = MapPermisosSeleccionados(user.Permisos, user);

            // Actualizar la lista de permisos del usuario
            user.Permisos = permisosActualizados;
            
            agregarUsuario.Ejecutar(user);
            Navigation.NavigateTo("/");

        }
        catch(Exception error){
            Console.WriteLine($"Error al crear nuevo usuario: {error.Message}");

        }
    
    }

    private List<Permiso> MapPermisosSeleccionados(List<Permiso> permisosUsuario, UserAccount userToUpdate){
        var permisosActualizados = new List<Permiso>();
        foreach (var tipoPermiso in permisosSeleccionados){
            var permiso = BuscarPermisoPorTipo(tipoPermiso, userToUpdate);
            if (permiso != null){
                permisosActualizados.Add(permiso);
            }
        }
        return permisosActualizados;
    }

    private Permiso BuscarPermisoPorTipo(TipoPermiso tipoPermiso, UserAccount userToUpdate)
    {
        if (userToUpdate.Permisos != null)
        {
            // Buscar el permiso que coincide con el tipo de permiso
            var permiso = DbContext.Permisos.FirstOrDefault(p => p.tipoPermiso == tipoPermiso);
            return permiso;
        }
        else
        {
            // Inicializar una nueva lista de permisos vacía
            userToUpdate.Permisos = new List<Permiso>();
            return DbContext.Permisos.FirstOrDefault(p => p.tipoPermiso == tipoPermiso);
        }
    }
}