@page "/userprofile_edit/{Id:int?}"
@rendermode InteractiveServer
@inject ModificarUserAccountUseCase modificarUserAccount
@inject ObtenerUserAccountUseCase obtenerUsuario
@inject IServicioHash servicioHash
@inject NavigationManager Navigation


<h3>Editar Perfil</h3>

@if (updated == null)
{
    <p>El usuario no existe</p>
}
else
{
    <form method="post" @onsubmit="Modificar">
        <div class="mb-3">
            <label for="UserName">Nombre de Usuario:</label>
            <input type="text" id="UserName" class="form-control" @bind="updated.UserName" required />
        </div>

        <div class="mb-3">
            <label for="Name">Nombre:</label>
            <input type="text" id="Name" class="form-control" @bind="updated.Name" required />
        </div>
        <div class="mb-3">
            <label for="Surname">Apellido:</label>
            <input type="text" id="Surname" class="form-control" @bind="updated.Surname" required />
        </div>
        <div class="mb-3">
            <label for="Email">Email:</label>
            <input type="email" id="Email" class="form-control" @bind="updated.Email" required />
        </div>
        <div class="mb-3">
            <label for="Role">Rol:</label>
            <select id="Role" class="form-control" @bind="updated.Role" required>
                <option value="Usuario">Usuario</option>
                <option value="Administrador">Administrador</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="Permisos">Permisos:</label>
            @foreach (TipoPermiso permiso in Enum.GetValues(typeof(TipoPermiso)))
            {
                <div>
                    <input type="checkbox" id="permiso-@permiso" @onchange="e => TogglePermiso(permiso, e)" />
                    <label for="permiso-@(permiso)">@(permiso)</label>
                </div>
            }
        </div>
        <button class="btn btn-primary" @onclick="Modificar">Guardar</button>
    </form>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
                <span class="text-success">@successMessage</span>
            </div>
    <br><br>
    <h4>Cambiar Contraseña del Usuario</h4>
    <form method="post" @onsubmit="CambiarContraseña">
        <div class="mb-3">
            <label for="NewPassword">Nueva Contraseña:</label>
            <input type="password" id="NewPassword" class="form-control" @bind="newPassword" />
        </div>
        <button type="submit" class="btn btn-secondary">Cambiar Contraseña</button>
    </form>
    <br><br>
}

@code {
    [Parameter] public int Id { get; set; }
    private UserAccount updated { get; set; } = new UserAccount();
    private string newPassword { get; set; }
    private List<TipoPermiso> tipoPermisosSeleccionados = new List<TipoPermiso>(); // Crear lista de permisos seleccionados
    private string? errorMessage,successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        updated = obtenerUsuario.Ejecutar(Id);
        if (updated is not null) StateHasChanged();
        
    }

    private void TogglePermiso(TipoPermiso tipoPermiso, ChangeEventArgs e)
    {
        if ((bool)e.Value) tipoPermisosSeleccionados.Add(tipoPermiso); // Agregar el permiso a la lista de permisos seleccionados
        else tipoPermisosSeleccionados.Remove(tipoPermiso); // Quitar el permiso de la lista de permisos seleccionados
    }

    void Modificar()
    {

        try{

            @* var userToUpdate= obtenerUsuario.Ejecutar(Id); *@
            @* if (userToUpdate != null) *@
            {
                // Actualizar solo los campos no relacionados con la contraseña
                modificarUserAccount.Ejecutar(updated,tipoPermisosSeleccionados);

                Navigation.NavigateTo("/administracion");
            }
        }
        catch(ValidacionException e){
            errorMessage=e.Message;
            return;
        }
        catch(RepositorioException e){
            errorMessage=e.Message;
            return;
        }
    }
    private void CambiarContraseña()
    {
        @* var userToUpdate =obtenerUsuario.Ejecutar(Id);
        
        if (userToUpdate != null && !string.IsNullOrEmpty(newPassword))
        { *@
        try{
                modificarUserAccount.Ejecutar(updated,newPassword);

                Navigation.NavigateTo("/administracion");

        }
        catch(ValidacionException e){
            errorMessage=e.Message;
            return;
        }
        catch(RepositorioException e){
            errorMessage=e.Message;
            return;
        }
        @* } *@
    }

}
