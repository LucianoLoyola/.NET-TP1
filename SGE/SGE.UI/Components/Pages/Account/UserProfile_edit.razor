@page "/userprofile_edit/{Id:int?}"
@attribute [Authorize(Roles = "Administrador")]
@rendermode InteractiveServer
@inject ModificarUserAccountUseCase modificarUserAccount
@inject ObtenerUserAccountUseCase obtenerUsuario
@inject IServicioSesion sesion
@inject IServicioHash servicioHash
@inject NavigationManager Navigation


<h3>Editar Perfil</h3>

@if (user == null)
{
    <p>El usuario no existe</p>
}
else
{
    <form method="post" @onsubmit="Modificar">
        <div class="mb-3">
            <label for="UserName">Nombre de Usuario:</label>
            <input type="text" id="UserName" class="form-control" @bind="user.UserName" required />
        </div>

        <div class="mb-3">
            <label for="Name">Nombre:</label>
            <input type="text" id="Name" class="form-control" @bind="user.Name" required />
        </div>
        <div class="mb-3">
            <label for="Surname">Apellido:</label>
            <input type="text" id="Surname" class="form-control" @bind="user.Surname" required />
        </div>
        <div class="mb-3">
            <label for="Email">Email:</label>
            <input type="email" id="Email" class="form-control" @bind="user.Email" required />
        </div>
        <div class="mb-3">
            <label for="Role">Rol:</label>
            <select id="Role" class="form-control" @bind="user.Role" required>
                <option value="Usuario">Usuario</option>
                <option value="Administrador">Administrador</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="Permisos">Permisos:</label>
            @foreach (TipoPermiso permiso in Enum.GetValues(typeof(TipoPermiso)))
            {
                <div>
                    <input type="checkbox" id="permiso-@permiso" @onchange="e => TogglePermiso(permiso, e)" />
                    <label for="permiso-@(permiso)">@(permiso)</label>
                </div>
            }
        </div>
        <button class="btn btn-primary" @onclick="Modificar">Guardar</button>
    </form>

    <h4>Cambiar Contraseña</h4>
    <form method="post" @onsubmit="CambiarContraseña">
        <div class="mb-3">
            <label for="NewPassword">Nueva Contraseña:</label>
            <input type="password" id="NewPassword" class="form-control" @bind="newPassword" />
        </div>
        <button type="submit" class="btn btn-secondary">Cambiar Contraseña</button>
    </form>
}

@code {
    [Parameter] public int Id { get; set; }
    private UserAccount user { get; set; } = new UserAccount();
    private string newPassword { get; set; }
    private List<TipoPermiso> tipoPermisosSeleccionados = new List<TipoPermiso>(); // Crear lista de permisos seleccionados

    protected override async Task OnInitializedAsync()
    {
        user = obtenerUsuario.Ejecutar(Id);
        if (user is not null) StateHasChanged();
        
    }

    private void TogglePermiso(TipoPermiso tipoPermiso, ChangeEventArgs e)
    {
        if ((bool)e.Value) tipoPermisosSeleccionados.Add(tipoPermiso); // Agregar el permiso a la lista de permisos seleccionados
        else tipoPermisosSeleccionados.Remove(tipoPermiso); // Quitar el permiso de la lista de permisos seleccionados
    }

    void Modificar()
    {

        try{
            var userToUpdate= obtenerUsuario.Ejecutar(Id);
            
            if (userToUpdate != null)
            {
                // Actualizar solo los campos no relacionados con la contraseña
                userToUpdate.UserName = user.UserName;
                userToUpdate.Name = user.Name;
                userToUpdate.Surname = user.Surname;
                userToUpdate.Email = user.Email;
                userToUpdate.Role = user.Role;
                AgregarPermisos(userToUpdate,tipoPermisosSeleccionados);

                modificarUserAccount.Ejecutar(userToUpdate);

                Navigation.NavigateTo("/administracion");
            }
        }
        catch(Exception error){
            Console.WriteLine($"Error al modificar usuario: {error.Message}");

        }
    }


    private void AgregarPermisos(UserAccount user, List<TipoPermiso> listaTipoPermisos){
        
        List<Permiso> permisosActuales = user.Permisos;
        foreach(TipoPermiso tp in listaTipoPermisos){
            AgregarPermiso(tp,permisosActuales);
        }
        user.Permisos= permisosActuales;
    }

    //puede que no sea la solución mas eficiente
    private void AgregarPermiso(TipoPermiso tipoPermiso, List<Permiso> permisosActuales){
        
        switch (tipoPermiso)
        {
            case TipoPermiso.Lectura:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.Lectura } );
                break;
            case TipoPermiso.ExpedienteAlta:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.ExpedienteAlta } );
                break;
            case TipoPermiso.ExpedienteBaja:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.ExpedienteBaja } );
                break;
            case TipoPermiso.ExpedienteModificacion:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.ExpedienteModificacion } );
                break;
            case TipoPermiso.TramiteAlta:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.TramiteAlta } );
                break;
            case TipoPermiso.TramiteBaja:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.TramiteBaja } );
                break;
            case TipoPermiso.TramiteModificacion:
                permisosActuales.Add(new Permiso { tipoPermiso = TipoPermiso.TramiteModificacion } );
                break;
            default:
            break;
        }
        
    }

    private void CambiarContraseña()
    {
        var userToUpdate =obtenerUsuario.Ejecutar(Id);
        
        if (userToUpdate != null && !string.IsNullOrEmpty(newPassword))
        {
            userToUpdate.Password = servicioHash.GetHashSha256(newPassword);
            modificarUserAccount.Ejecutar(userToUpdate);

            Navigation.NavigateTo("/administracion");
        }
    }

    }

}