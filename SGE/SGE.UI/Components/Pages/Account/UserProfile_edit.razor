@page "/userprofile_edit/{userId:int?}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrador")]
@using Microsoft.EntityFrameworkCore
@using SGE.Repositorios
@using SGE.Aplicacion
@using SGE.Aplicacion.CasosDeUso
@rendermode InteractiveServer
@inject ModificarUserAccountUseCase modificarUserAccount
@inject IServicioSesion sesion
@inject SGEContext DbContext
@inject IServicioHash servicioHash
@inject NavigationManager Navigation

<h3>Editar Perfil</h3>

@if (user == null)
{
    <p>El usuario no existe</p>
}
else
{
    <form method="post" @onsubmit="HandleValidSubmit">
        <div class="mb-3">
            <label for="UserName">Nombre de Usuario:</label>
            <input type="text" id="UserName" class="form-control" @bind="user.UserName" required />
        </div>
        
        <div class="mb-3">
            <label for="Email">Contraseña:</label>
            <input type="password" id="Contraseña" class="form-control" @bind="user.Password" required />
        </div>
        <div class="mb-3">
            <label for="Name">Nombre:</label>
            <input type="text" id="Name" class="form-control" @bind="user.Name" required />
        </div>
        <div class="mb-3">
            <label for="Surname">Apellido:</label>
            <input type="text" id="Surname" class="form-control" @bind="user.Surname" required />
        </div>
        <div class="mb-3">
            <label for="Email">Email:</label>
            <input type="email" id="Email" class="form-control" @bind="user.Email" required />
        </div>
        <div class="mb-3">
            <label for="Role">Rol:</label>
            <select id="Role" class="form-control" @bind="user.Role" required>
                <option value="Usuario">Usuario</option>
                <option value="Administrador">Administrador</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="Permisos">Permisos:</label>
            @foreach (TipoPermiso permiso in Enum.GetValues(typeof(TipoPermiso)))
            {
                <div>
                    <input type="checkbox" id="permiso-@permiso" @onchange="e => TogglePermiso(permiso, e)" />
                    <label for="permiso-@(permiso)">@(permiso)</label>
                </div>
            }
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
    </form>
}

@code {
    [Parameter] public int UserId { get; set; }
    private UserAccount user { get; set; } = new UserAccount();
    private List<TipoPermiso> permisosSeleccionados = new List<TipoPermiso>(); // Crear lista de permisos seleccionados
    protected override async Task OnInitializedAsync(){
        user = await DbContext.Usuarios.FindAsync(UserId);
        if (user == null){
            Console.WriteLine("Falla al encontrar usuario");
            Navigation.NavigateTo("/error");
        }
        else{
            Console.WriteLine($"Rol del usuario: {user.Role}");
            user.Password= servicioHash.GetHashSha256(user.Password);
            StateHasChanged();
        }
    }

    private void TogglePermiso(TipoPermiso permiso, ChangeEventArgs e)
    {
        if ((bool)e.Value) permisosSeleccionados.Add(permiso); // Agregar el permiso a la lista de permisos seleccionados
        else permisosSeleccionados.Remove(permiso); // Quitar el permiso de la lista de permisos seleccionados
    }
    private async Task HandleValidSubmit(){
        var userToUpdate = await DbContext.Usuarios.FindAsync(UserId);
        if (userToUpdate != null){
            // Mapear los permisos seleccionados a objetos Permiso
            var permisosActualizados = MapPermisosSeleccionados(userToUpdate.Permisos, userToUpdate);

            // Actualizar la lista de permisos del usuario
            userToUpdate.Permisos = permisosActualizados;
            userToUpdate.Password= servicioHash.GetHashSha256(userToUpdate.Password);

            modificarUserAccount.Ejecutar(userToUpdate);

            Console.WriteLine("Exito");
            Navigation.NavigateTo("/administracion");
        }
    }

    private List<Permiso> MapPermisosSeleccionados(List<Permiso> permisosUsuario, UserAccount userToUpdate){
        var permisosActualizados = new List<Permiso>();
        foreach (var tipoPermiso in permisosSeleccionados){
            var permiso = BuscarPermisoPorTipo(tipoPermiso, userToUpdate);
            if (permiso != null){
                permisosActualizados.Add(permiso);
            }
        }
        return permisosActualizados;
    }

    private Permiso BuscarPermisoPorTipo(TipoPermiso tipoPermiso, UserAccount userToUpdate){
        if (userToUpdate.Permisos != null) return userToUpdate.Permisos.FirstOrDefault(p => p.tipoPermiso == tipoPermiso);
        else return null;
    }
}
