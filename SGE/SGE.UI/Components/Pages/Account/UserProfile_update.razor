@page "/userprofile_update/{UserId:int?}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles="Administrador,Usuario")]
@using Microsoft.EntityFrameworkCore
@using SGE.Repositorios
@using SGE.Aplicacion
@using SGE.Aplicacion.CasosDeUso
@rendermode InteractiveServer
@inject ModificarUserAccountUseCase modificarUserAccount
@inject ObtenerUserAccountUseCase obtenerUsuario
@inject IServicioSesion sesion
@inject SGEContext DbContext
@inject NavigationManager Navigation

<h3>Actualizar Perfil</h3>

@if (user == null)
{
    <p>El usuario no existe</p>
}
else
{
    <EditForm Model="user" OnValidSubmit="Modificar" OnInvalidSubmit="Modificar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="UserName">Nombre de Usuario:</label>
            <InputText id="UserName" class="form-control" @bind-Value="user.UserName" required />
        </div>
        <div class="mb-3">
            <label for="Name">Nombre:</label>
            <InputText id="Name" class="form-control" @bind-Value="user.Name" required />
        </div>
        <div class="mb-3">
            <label for="Surname">Apellido:</label>
            <InputText id="Surname" class="form-control" @bind-Value="user.Surname" required />
        </div>
        <div class="mb-3">
            <label for="Email">Email:</label>
            <InputText id="Email" type="email" class="form-control" @bind-Value="user.Email" required />
        </div>
        <button class="btn btn-primary" @onclick="Modificar">Guardar</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private UserAccount user { get; set; } = new UserAccount();

    private string lastModifiedUserName = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        user = obtenerUsuario.Ejecutar(UserId);
        if (user == null)
        {
            Console.WriteLine("Falla al encontrar usuario");
            Navigation.NavigateTo("/error");
        }
        else
        {
            lastModifiedUserName = user.UserName;
            StateHasChanged();
        }
    }

    void Modificar()
    {
        errorMessage = "";  // Clear any previous error messages
        try{

        
            var userToUpdate = obtenerUsuario.Ejecutar(UserId);
            if (userToUpdate != null)
            {
                userToUpdate.UserName = user.UserName;
                userToUpdate.Name = user.Name;
                userToUpdate.Surname = user.Surname;
                userToUpdate.Email = user.Email;
                
                modificarUserAccount.Ejecutar(userToUpdate);

                if (string.Compare(lastModifiedUserName, user.UserName) != 0)
                {
                    Navigation.NavigateTo("/logout");
                }
                else
                {
                    Navigation.NavigateTo("/");
                }
            }
        }
        catch(Exception error){
            Console.WriteLine($"Error al modificar usuario: {error.Message}");
        }
    }


}

