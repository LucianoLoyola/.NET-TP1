@page "/userprofile_update/{UserId:int?}"
@rendermode InteractiveServer
@inject ModificarUserAccountUseCase modificarUserAccount
@inject ObtenerUserAccountUseCase obtenerUsuario
@inject NavigationManager Navigation

<h3>Actualizar Perfil</h3>

@if (updated == null)
{
    <p>El usuario no existe</p>
}
else
{
    <EditForm Model="updated" OnValidSubmit="Modificar" OnInvalidSubmit="Modificar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="UserName">Nombre de Usuario:</label>
            <InputText id="UserName" class="form-control" @bind-Value="updated.UserName" required />
        </div>
        <div class="mb-3">
            <label for="Name">Nombre:</label>
            <InputText id="Name" class="form-control" @bind-Value="updated.Name" required />
        </div>
        <div class="mb-3">
            <label for="Surname">Apellido:</label>
            <InputText id="Surname" class="form-control" @bind-Value="updated.Surname" required />
        </div>
        <div class="mb-3">
            <label for="Email">Email:</label>
            <InputText id="Email" type="email" class="form-control" @bind-Value="updated.Email" required />
        </div>
        <button class="btn btn-primary" @onclick="Modificar">Guardar</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <span class="text-success">@successMessage</span>
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private UserAccount updated { get; set; } = new UserAccount();

    private string lastModifiedUserName = "";
    private string? errorMessage,successMessage = "";
    protected override async Task OnInitializedAsync()
    {
        try{
            updated = obtenerUsuario.Ejecutar(UserId);
            lastModifiedUserName = updated.UserName;
            StateHasChanged();
        }
        catch(RepositorioException e){
            errorMessage=e.Message;
        }
        catch(Exception e){
            errorMessage=e.Message;
        }
    }

    void Modificar()
    {
        errorMessage = ""; 
        try{

            @* var userToUpdate = obtenerUsuario.Ejecutar(UserId);
            if (userToUpdate != null)
            { *@
                
                modificarUserAccount.Ejecutar(updated);

                if (string.Compare(lastModifiedUserName, updated.UserName) != 0)
                {
                    Navigation.NavigateTo("/logout");
                }
                else
                {
                    Navigation.NavigateTo("/");
                }
            @* } *@
        }
        catch(AutorizacionException e){
            errorMessage=e.Message;
        }
        catch(ValidacionException e){
            errorMessage=e.Message;
        }
        catch(RepositorioException e){
            errorMessage=e.Message;
        }
    }


}

