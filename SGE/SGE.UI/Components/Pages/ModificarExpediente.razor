@page "/expediente/{Id:int?}"
@rendermode InteractiveServer
@inject CasoDeUsoExpedienteAlta altaExpediente
@inject CasoDeUsoExpedienteConsultaPorId consultaExpediente
@inject CasoDeUsoExpedienteModificacion modificacionExpediente
@inject NavigationManager Navegador
@inject IServicioSession sesion

@if (_isLoading)
{
    <p>Cargando...</p>
}
else if (_esNuevoExpediente)
{
    <h3>Agregar Expediente</h3>

    @* Formulario para agregar Expediente *@
    <form>
        <div class="form-group">
            <label for="caratula">Caratula:</label>
            <input type="text" class="form-control" id="caratula" @bind="_expediente.caratula" required>
        </div>

        @* Campo para seleccionar el estado del expediente *@
        <div class="form-group">
            <label for="estado">Estado del Expediente:</label>
            <select id="estado" class="form-control" @bind="_expediente.estado">
                @foreach (var estado in estados)
                {
                    <option value="@estado">@estado</option>
                }
            </select>
        </div>

        <button class="btn btn-primary" @onclick="CrearExpediente">Agregar Expediente</button>
        @if (!string.IsNullOrEmpty(_errorMessageAuthAlta))
        {
            <span class="text-danger">@_errorMessageAuthAlta</span>
        }
    </form>
}
else
{
    <h3>Modificar Expediente</h3>

    @* Formulario para modificar Expediente *@
    <form>
        <div class="form-group">
            <label for="caratula">Caratula:</label>
            <input type="text" class="form-control" id="caratula" @bind="_expediente.caratula" required>
        </div>

        @* Campo para seleccionar el estado del expediente *@
        <div class="form-group">
            <label for="estado">Estado del Expediente:</label>
            <select id="estado" class="form-control" @bind="_expediente.estado">
                @foreach (var estado in estados)
                {
                    <option value="@estado">@estado</option>
                }
            </select>
        </div>

        <button class="btn btn-primary" @onclick="ActualizarExpediente">Modificar Expediente</button>
        @if (!string.IsNullOrEmpty(_errorMessageAuthEdit))
        {
            <span class="text-danger">@_errorMessageAuthEdit</span>
        }
    </form>
}

@code {
    Expediente _expediente = new Expediente();
    [Parameter] public int? Id { get; set; }
    bool _esNuevoExpediente = true;
    private bool _isLoading = true;
    private string _errorMessageAuthAlta = string.Empty;
    private string _errorMessageAuthEdit = string.Empty;
    private List<Estado> estados = Enum.GetValues(typeof(Estado)).Cast<Estado>().ToList();

    //se implementa una logica de delay (loading) para mostrar el mensaje de excepción de permiso
    //quitando esto, funciona igual pero el mensaje se muestra por pocos milisegundos
    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            try
            {
                await Task.Delay(1000); // Simulación de carga
                var exp_hallado = consultaExpediente.Ejecutar(Id.Value);
                if (exp_hallado != null)
                {
                    _expediente = exp_hallado;
                    _esNuevoExpediente = false;
                }
            }
            catch (Exception ex)
            {
                _errorMessageAuthAlta = "Error al cargar el expediente.";
                _errorMessageAuthEdit = "Error al cargar el expediente.";
                Console.WriteLine($"Error al cargar expediente: {ex.Message}");
            }
            finally
            {
                _isLoading = false;
            }
        }
        else
        {
            _isLoading = false;
        }
    }

    void CrearExpediente()
    {
        try
        {
            _errorMessageAuthAlta = string.Empty;
            altaExpediente.Ejecutar(_expediente, sesion.User.Id, TipoPermiso.ExpedienteAlta);
            Siguiente();
        }
        catch (Exception error)
        {
            _errorMessageAuthAlta = "No tiene permisos para agregar este expediente.";
            Console.WriteLine($"Error al agregar expediente: {error.Message}");
        }
    }

    void ActualizarExpediente()
    {
        try
        {
            _errorMessageAuthEdit = string.Empty;
            modificacionExpediente.Ejecutar(_expediente, sesion.User.Id, TipoPermiso.ExpedienteModificacion);
            Siguiente();
        }
        catch (Exception error)
        {
            _errorMessageAuthEdit = "No tiene permisos para modificar este expediente.";
            Console.WriteLine($"Error al modificar expediente: {error.Message}");
        }
    }

    void Siguiente()
    {
        try
        {
            Navegador.NavigateTo("/listadoExpedientes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al navegar: {ex.Message}");
        }
    }
}
