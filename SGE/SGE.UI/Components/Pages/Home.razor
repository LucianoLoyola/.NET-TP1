@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles="Administrador,Usuario")]
@using Microsoft.EntityFrameworkCore
@using SGE.Repositorios
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject SGEContext DbContext

<PageTitle>Home</PageTitle>

<div class="row">
    <div class="col-12">
        <h2 class="fw-bolder">Bienvenido a la página</h2>
    </div>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <NotAuthorized>
                    @if (!user.Identity.IsAuthenticated)
                    {
                        <span>No estás logeado.</span>
                    }
                </NotAuthorized>
                <Authorized>
                    @if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
                    {
                        <span>Sesión iniciada como <b>@user.Identity.Name</b></span>
                        <span>Tu rol es: <b>@UserRole</b></span>
                    }
                </Authorized>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal user;
    private string UserRole { get; set; }
    private List<UserAccount> usuarios;  // Lista de usuarios para imprimir en consola


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;


        usuarios = await DbContext.Usuarios.Include(u => u.Permisos).ToListAsync();
        foreach (var usuario in usuarios)
        {
            Console.WriteLine($"Usuario: {usuario.UserName}");

            // Verificar si el usuario tiene permisos
            if (usuario.Permisos != null && usuario.Permisos.Any())
            {
                Console.WriteLine("Permisos:");

                // Iterar sobre los permisos del usuario
            foreach (var permiso in usuario.Permisos)
                {
                    Console.WriteLine($" - {permiso.tipoPermiso}");
                }

            }
            else
            {
                Console.WriteLine("Este usuario no tiene permisos asignados.");
            }

            Console.WriteLine(); // Separador entre usuarios
        }


        // Obtener el nombre de usuario del claim
        var userName = user.Identity.Name;

        // Obtener el rol del usuario desde la base de datos
        var userData = DbContext.Usuarios.Where(u => u.UserName == userName).FirstOrDefault();
        if (userData != null)
        {
            UserRole = userData.Role;
        }
    }
}
