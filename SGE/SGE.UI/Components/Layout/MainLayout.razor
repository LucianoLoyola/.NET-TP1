@inherits LayoutComponentBase
@using System.Security.Claims
@using SGE.Repositorios
@inject SGEContext DbContext


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <NotAuthorized>
                    <a href="/login">Iniciar Sesión</a>
                    <a href="/register">Registrarse</a>
                </NotAuthorized>
                <Authorized>
                    @if (!string.IsNullOrEmpty(UserRole) && UserRole.Equals("Administrador", StringComparison.OrdinalIgnoreCase))
                        {
                            <a href="/userprofile/@Id">ActualizarPerfil</a>
                            <a href="/administracion">Administración</a>
                        }
                    <a href="/userprofile/@Id">ActualizarPerfil</a>
                    <a href="/logout">Cerrar Sesión</a>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal user;
    private string UserRole { get; set; }
    private int Id {get; set;}
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        // Obtener el nombre de usuario del claim
        var userName = user.Identity.Name;

        // Obtener el rol y el Id del usuario desde la base de datos
        var userData = DbContext.Usuarios.Where(u => u.UserName == userName).FirstOrDefault();
        if (userData != null)
        {
            UserRole = userData.Role;
            Id = userData.Id;
        }
    }
}